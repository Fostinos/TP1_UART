
TP1_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000281c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080029c8  080029c8  000129c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029e0  080029e0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080029e0  080029e0  000129e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080029e8  080029e8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029e8  080029e8  000129e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029ec  080029ec  000129ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080029f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000001c  08002a0c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08002a0c  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006fbe  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014fa  00000000  00000000  0002700a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000680  00000000  00000000  00028508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005d8  00000000  00000000  00028b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a7c  00000000  00000000  00029160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007244  00000000  00000000  0004abdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccfa1  00000000  00000000  00051e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011edc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001974  00000000  00000000  0011ee14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080029b0 	.word	0x080029b0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	080029b0 	.word	0x080029b0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ea:	f000 faf5 	bl	8000ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ee:	f000 f851 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f2:	f000 f90d 	bl	8000710 <MX_GPIO_Init>
  MX_UART5_Init();
 80004f6:	f000 f8b7 	bl	8000668 <MX_UART5_Init>
  MX_USART3_UART_Init();
 80004fa:	f000 f8df 	bl	80006bc <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */

  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 80004fe:	4b1e      	ldr	r3, [pc, #120]	; (8000578 <main+0x94>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	68da      	ldr	r2, [r3, #12]
 8000504:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <main+0x94>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f042 0220 	orr.w	r2, r2, #32
 800050c:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart5, UART_IT_RXNE);
 800050e:	4b1b      	ldr	r3, [pc, #108]	; (800057c <main+0x98>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	68da      	ldr	r2, [r3, #12]
 8000514:	4b19      	ldr	r3, [pc, #100]	; (800057c <main+0x98>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f042 0220 	orr.w	r2, r2, #32
 800051c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	// Initialisation des tableaux de reception
	for(int i=0; i<SIZE; i++)
 800051e:	2300      	movs	r3, #0
 8000520:	607b      	str	r3, [r7, #4]
 8000522:	e00c      	b.n	800053e <main+0x5a>
	{
		TableTxUART3[i]='\0';
 8000524:	4a16      	ldr	r2, [pc, #88]	; (8000580 <main+0x9c>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4413      	add	r3, r2
 800052a:	2200      	movs	r2, #0
 800052c:	701a      	strb	r2, [r3, #0]
		TableTxUART5[i]='\0';
 800052e:	4a15      	ldr	r2, [pc, #84]	; (8000584 <main+0xa0>)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4413      	add	r3, r2
 8000534:	2200      	movs	r2, #0
 8000536:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<SIZE; i++)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	3301      	adds	r3, #1
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2b04      	cmp	r3, #4
 8000542:	ddef      	ble.n	8000524 <main+0x40>
	}
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000544:	2201      	movs	r2, #1
 8000546:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054a:	480f      	ldr	r0, [pc, #60]	; (8000588 <main+0xa4>)
 800054c:	f000 fe02 	bl	8001154 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart3, TableRxUART3, SIZE, 100);
 8000550:	2364      	movs	r3, #100	; 0x64
 8000552:	2205      	movs	r2, #5
 8000554:	490d      	ldr	r1, [pc, #52]	; (800058c <main+0xa8>)
 8000556:	4808      	ldr	r0, [pc, #32]	; (8000578 <main+0x94>)
 8000558:	f001 fae9 	bl	8001b2e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, TableRxUART5, SIZE, 100);
 800055c:	2364      	movs	r3, #100	; 0x64
 800055e:	2205      	movs	r2, #5
 8000560:	490b      	ldr	r1, [pc, #44]	; (8000590 <main+0xac>)
 8000562:	4806      	ldr	r0, [pc, #24]	; (800057c <main+0x98>)
 8000564:	f001 fae3 	bl	8001b2e <HAL_UART_Transmit>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000568:	2200      	movs	r2, #0
 800056a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800056e:	4806      	ldr	r0, [pc, #24]	; (8000588 <main+0xa4>)
 8000570:	f000 fdf0 	bl	8001154 <HAL_GPIO_WritePin>
	for(int i=0; i<SIZE; i++)
 8000574:	e7d3      	b.n	800051e <main+0x3a>
 8000576:	bf00      	nop
 8000578:	20000038 	.word	0x20000038
 800057c:	20000080 	.word	0x20000080
 8000580:	200000c0 	.word	0x200000c0
 8000584:	20000078 	.word	0x20000078
 8000588:	40021800 	.word	0x40021800
 800058c:	20000000 	.word	0x20000000
 8000590:	20000008 	.word	0x20000008

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	; 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	2230      	movs	r2, #48	; 0x30
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 f9fc 	bl	80029a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	4b28      	ldr	r3, [pc, #160]	; (8000660 <SystemClock_Config+0xcc>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	4a27      	ldr	r2, [pc, #156]	; (8000660 <SystemClock_Config+0xcc>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	; 0x40
 80005c8:	4b25      	ldr	r3, [pc, #148]	; (8000660 <SystemClock_Config+0xcc>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	4b22      	ldr	r3, [pc, #136]	; (8000664 <SystemClock_Config+0xd0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a21      	ldr	r2, [pc, #132]	; (8000664 <SystemClock_Config+0xd0>)
 80005de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <SystemClock_Config+0xd0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f0:	2301      	movs	r3, #1
 80005f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	2302      	movs	r3, #2
 80005fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000602:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000604:	2304      	movs	r3, #4
 8000606:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000608:	23a8      	movs	r3, #168	; 0xa8
 800060a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060c:	2302      	movs	r3, #2
 800060e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000610:	2303      	movs	r3, #3
 8000612:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 0320 	add.w	r3, r7, #32
 8000618:	4618      	mov	r0, r3
 800061a:	f000 fdcf 	bl	80011bc <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000624:	f000 f8e2 	bl	80007ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062c:	2302      	movs	r3, #2
 800062e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000634:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000638:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800063a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2105      	movs	r1, #5
 8000646:	4618      	mov	r0, r3
 8000648:	f001 f828 	bl	800169c <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000652:	f000 f8cb 	bl	80007ec <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3750      	adds	r7, #80	; 0x50
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_UART5_Init+0x4c>)
 800066e:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <MX_UART5_Init+0x50>)
 8000670:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MX_UART5_Init+0x4c>)
 8000674:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000678:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_UART5_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_UART5_Init+0x4c>)
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_UART5_Init+0x4c>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_UART5_Init+0x4c>)
 800068e:	220c      	movs	r2, #12
 8000690:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_UART5_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_UART5_Init+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_UART5_Init+0x4c>)
 80006a0:	f001 f9f8 	bl	8001a94 <HAL_UART_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80006aa:	f000 f89f 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000080 	.word	0x20000080
 80006b8:	40005000 	.word	0x40005000

080006bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006c2:	4a12      	ldr	r2, [pc, #72]	; (800070c <MX_USART3_UART_Init+0x50>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006f4:	f001 f9ce 	bl	8001a94 <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006fe:	f000 f875 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000038 	.word	0x20000038
 800070c:	40004800 	.word	0x40004800

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	; 0x28
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
 800072a:	4b2e      	ldr	r3, [pc, #184]	; (80007e4 <MX_GPIO_Init+0xd4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a2d      	ldr	r2, [pc, #180]	; (80007e4 <MX_GPIO_Init+0xd4>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b2b      	ldr	r3, [pc, #172]	; (80007e4 <MX_GPIO_Init+0xd4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	4b27      	ldr	r3, [pc, #156]	; (80007e4 <MX_GPIO_Init+0xd4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a26      	ldr	r2, [pc, #152]	; (80007e4 <MX_GPIO_Init+0xd4>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <MX_GPIO_Init+0xd4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0302 	and.w	r3, r3, #2
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <MX_GPIO_Init+0xd4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a1f      	ldr	r2, [pc, #124]	; (80007e4 <MX_GPIO_Init+0xd4>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <MX_GPIO_Init+0xd4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <MX_GPIO_Init+0xd4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a18      	ldr	r2, [pc, #96]	; (80007e4 <MX_GPIO_Init+0xd4>)
 8000784:	f043 0308 	orr.w	r3, r3, #8
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_GPIO_Init+0xd4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0308 	and.w	r3, r3, #8
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	603b      	str	r3, [r7, #0]
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_GPIO_Init+0xd4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a11      	ldr	r2, [pc, #68]	; (80007e4 <MX_GPIO_Init+0xd4>)
 80007a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_GPIO_Init+0xd4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80007b8:	480b      	ldr	r0, [pc, #44]	; (80007e8 <MX_GPIO_Init+0xd8>)
 80007ba:	f000 fccb 	bl	8001154 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80007be:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80007c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	4804      	ldr	r0, [pc, #16]	; (80007e8 <MX_GPIO_Init+0xd8>)
 80007d8:	f000 fb10 	bl	8000dfc <HAL_GPIO_Init>

}
 80007dc:	bf00      	nop
 80007de:	3728      	adds	r7, #40	; 0x28
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40021800 	.word	0x40021800

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
	...

080007fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_MspInit+0x54>)
 8000808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080a:	4a11      	ldr	r2, [pc, #68]	; (8000850 <HAL_MspInit+0x54>)
 800080c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000810:	6453      	str	r3, [r2, #68]	; 0x44
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <HAL_MspInit+0x54>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <HAL_MspInit+0x54>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	4a0a      	ldr	r2, [pc, #40]	; (8000850 <HAL_MspInit+0x54>)
 8000828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082c:	6413      	str	r3, [r2, #64]	; 0x40
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <HAL_MspInit+0x54>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	210f      	movs	r1, #15
 800083e:	f06f 0001 	mvn.w	r0, #1
 8000842:	f000 fa82 	bl	8000d4a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800

08000854 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08c      	sub	sp, #48	; 0x30
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a4a      	ldr	r2, [pc, #296]	; (800099c <HAL_UART_MspInit+0x148>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d153      	bne.n	800091e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
 800087a:	4b49      	ldr	r3, [pc, #292]	; (80009a0 <HAL_UART_MspInit+0x14c>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	4a48      	ldr	r2, [pc, #288]	; (80009a0 <HAL_UART_MspInit+0x14c>)
 8000880:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000884:	6413      	str	r3, [r2, #64]	; 0x40
 8000886:	4b46      	ldr	r3, [pc, #280]	; (80009a0 <HAL_UART_MspInit+0x14c>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800088e:	61bb      	str	r3, [r7, #24]
 8000890:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	4b42      	ldr	r3, [pc, #264]	; (80009a0 <HAL_UART_MspInit+0x14c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a41      	ldr	r2, [pc, #260]	; (80009a0 <HAL_UART_MspInit+0x14c>)
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b3f      	ldr	r3, [pc, #252]	; (80009a0 <HAL_UART_MspInit+0x14c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0304 	and.w	r3, r3, #4
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b3b      	ldr	r3, [pc, #236]	; (80009a0 <HAL_UART_MspInit+0x14c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a3a      	ldr	r2, [pc, #232]	; (80009a0 <HAL_UART_MspInit+0x14c>)
 80008b8:	f043 0308 	orr.w	r3, r3, #8
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b38      	ldr	r3, [pc, #224]	; (80009a0 <HAL_UART_MspInit+0x14c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0308 	and.w	r3, r3, #8
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d8:	2303      	movs	r3, #3
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80008dc:	2308      	movs	r3, #8
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	482f      	ldr	r0, [pc, #188]	; (80009a4 <HAL_UART_MspInit+0x150>)
 80008e8:	f000 fa88 	bl	8000dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008ec:	2304      	movs	r3, #4
 80008ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f8:	2303      	movs	r3, #3
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80008fc:	2308      	movs	r3, #8
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4828      	ldr	r0, [pc, #160]	; (80009a8 <HAL_UART_MspInit+0x154>)
 8000908:	f000 fa78 	bl	8000dfc <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	2100      	movs	r1, #0
 8000910:	2035      	movs	r0, #53	; 0x35
 8000912:	f000 fa1a 	bl	8000d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000916:	2035      	movs	r0, #53	; 0x35
 8000918:	f000 fa33 	bl	8000d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800091c:	e039      	b.n	8000992 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART3)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a22      	ldr	r2, [pc, #136]	; (80009ac <HAL_UART_MspInit+0x158>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d134      	bne.n	8000992 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <HAL_UART_MspInit+0x14c>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	4a1b      	ldr	r2, [pc, #108]	; (80009a0 <HAL_UART_MspInit+0x14c>)
 8000932:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000936:	6413      	str	r3, [r2, #64]	; 0x40
 8000938:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <HAL_UART_MspInit+0x14c>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <HAL_UART_MspInit+0x14c>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094c:	4a14      	ldr	r2, [pc, #80]	; (80009a0 <HAL_UART_MspInit+0x14c>)
 800094e:	f043 0302 	orr.w	r3, r3, #2
 8000952:	6313      	str	r3, [r2, #48]	; 0x30
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_UART_MspInit+0x14c>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000958:	f003 0302 	and.w	r3, r3, #2
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000960:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096e:	2303      	movs	r3, #3
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000972:	2307      	movs	r3, #7
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	480c      	ldr	r0, [pc, #48]	; (80009b0 <HAL_UART_MspInit+0x15c>)
 800097e:	f000 fa3d 	bl	8000dfc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2100      	movs	r1, #0
 8000986:	2027      	movs	r0, #39	; 0x27
 8000988:	f000 f9df 	bl	8000d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800098c:	2027      	movs	r0, #39	; 0x27
 800098e:	f000 f9f8 	bl	8000d82 <HAL_NVIC_EnableIRQ>
}
 8000992:	bf00      	nop
 8000994:	3730      	adds	r7, #48	; 0x30
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40005000 	.word	0x40005000
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40020800 	.word	0x40020800
 80009a8:	40020c00 	.word	0x40020c00
 80009ac:	40004800 	.word	0x40004800
 80009b0:	40020400 	.word	0x40020400

080009b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <MemManage_Handler+0x4>

080009ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <UsageFault_Handler+0x4>

080009da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80009fc:	4807      	ldr	r0, [pc, #28]	; (8000a1c <USART3_IRQHandler+0x24>)
 80009fe:	f001 f985 	bl	8001d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000a02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a06:	4806      	ldr	r0, [pc, #24]	; (8000a20 <USART3_IRQHandler+0x28>)
 8000a08:	f000 fbbd 	bl	8001186 <HAL_GPIO_TogglePin>
  HAL_UART_Receive_IT(&huart3, TableTxUART3, SIZE);
 8000a0c:	2205      	movs	r2, #5
 8000a0e:	4905      	ldr	r1, [pc, #20]	; (8000a24 <USART3_IRQHandler+0x2c>)
 8000a10:	4802      	ldr	r0, [pc, #8]	; (8000a1c <USART3_IRQHandler+0x24>)
 8000a12:	f001 f925 	bl	8001c60 <HAL_UART_Receive_IT>
  /* USER CODE END USART3_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000038 	.word	0x20000038
 8000a20:	40021800 	.word	0x40021800
 8000a24:	200000c0 	.word	0x200000c0

08000a28 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000a2c:	4807      	ldr	r0, [pc, #28]	; (8000a4c <UART5_IRQHandler+0x24>)
 8000a2e:	f001 f96d 	bl	8001d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */
  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000a32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a36:	4806      	ldr	r0, [pc, #24]	; (8000a50 <UART5_IRQHandler+0x28>)
 8000a38:	f000 fba5 	bl	8001186 <HAL_GPIO_TogglePin>
  HAL_UART_Receive_IT(&huart5, TableTxUART5, SIZE);
 8000a3c:	2205      	movs	r2, #5
 8000a3e:	4905      	ldr	r1, [pc, #20]	; (8000a54 <UART5_IRQHandler+0x2c>)
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <UART5_IRQHandler+0x24>)
 8000a42:	f001 f90d 	bl	8001c60 <HAL_UART_Receive_IT>
  /* USER CODE END UART5_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000080 	.word	0x20000080
 8000a50:	40021800 	.word	0x40021800
 8000a54:	20000078 	.word	0x20000078

08000a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <SystemInit+0x28>)
 8000a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a62:	4a07      	ldr	r2, [pc, #28]	; (8000a80 <SystemInit+0x28>)
 8000a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a6c:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <SystemInit+0x28>)
 8000a6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a72:	609a      	str	r2, [r3, #8]
#endif
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000abc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a8a:	e003      	b.n	8000a94 <LoopCopyDataInit>

08000a8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a92:	3104      	adds	r1, #4

08000a94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a94:	480b      	ldr	r0, [pc, #44]	; (8000ac4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a9c:	d3f6      	bcc.n	8000a8c <CopyDataInit>
  ldr  r2, =_sbss
 8000a9e:	4a0b      	ldr	r2, [pc, #44]	; (8000acc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000aa0:	e002      	b.n	8000aa8 <LoopFillZerobss>

08000aa2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000aa2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000aa4:	f842 3b04 	str.w	r3, [r2], #4

08000aa8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000aaa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000aac:	d3f9      	bcc.n	8000aa2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000aae:	f7ff ffd3 	bl	8000a58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ab2:	f001 ff51 	bl	8002958 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ab6:	f7ff fd15 	bl	80004e4 <main>
  bx  lr    
 8000aba:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000abc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000ac0:	080029f0 	.word	0x080029f0
  ldr  r0, =_sdata
 8000ac4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ac8:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8000acc:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8000ad0:	200000cc 	.word	0x200000cc

08000ad4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad4:	e7fe      	b.n	8000ad4 <ADC_IRQHandler>
	...

08000ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000adc:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <HAL_Init+0x40>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <HAL_Init+0x40>)
 8000ae2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ae6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <HAL_Init+0x40>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <HAL_Init+0x40>)
 8000aee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000af2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <HAL_Init+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a07      	ldr	r2, [pc, #28]	; (8000b18 <HAL_Init+0x40>)
 8000afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000afe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b00:	2003      	movs	r0, #3
 8000b02:	f000 f917 	bl	8000d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b06:	200f      	movs	r0, #15
 8000b08:	f000 f808 	bl	8000b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b0c:	f7ff fe76 	bl	80007fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023c00 	.word	0x40023c00

08000b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_InitTick+0x54>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_InitTick+0x58>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 f92f 	bl	8000d9e <HAL_SYSTICK_Config>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e00e      	b.n	8000b68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b0f      	cmp	r3, #15
 8000b4e:	d80a      	bhi.n	8000b66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b50:	2200      	movs	r2, #0
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295
 8000b58:	f000 f8f7 	bl	8000d4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b5c:	4a06      	ldr	r2, [pc, #24]	; (8000b78 <HAL_InitTick+0x5c>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b62:	2300      	movs	r3, #0
 8000b64:	e000      	b.n	8000b68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000010 	.word	0x20000010
 8000b74:	20000018 	.word	0x20000018
 8000b78:	20000014 	.word	0x20000014

08000b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <HAL_GetTick+0x14>)
 8000b82:	681b      	ldr	r3, [r3, #0]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	200000c8 	.word	0x200000c8

08000b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc6:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	60d3      	str	r3, [r2, #12]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	0a1b      	lsrs	r3, r3, #8
 8000be6:	f003 0307 	and.w	r3, r3, #7
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	db0b      	blt.n	8000c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	f003 021f 	and.w	r2, r3, #31
 8000c10:	4907      	ldr	r1, [pc, #28]	; (8000c30 <__NVIC_EnableIRQ+0x38>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	095b      	lsrs	r3, r3, #5
 8000c18:	2001      	movs	r0, #1
 8000c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000e100 	.word	0xe000e100

08000c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	6039      	str	r1, [r7, #0]
 8000c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	db0a      	blt.n	8000c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	490c      	ldr	r1, [pc, #48]	; (8000c80 <__NVIC_SetPriority+0x4c>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	0112      	lsls	r2, r2, #4
 8000c54:	b2d2      	uxtb	r2, r2
 8000c56:	440b      	add	r3, r1
 8000c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c5c:	e00a      	b.n	8000c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4908      	ldr	r1, [pc, #32]	; (8000c84 <__NVIC_SetPriority+0x50>)
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	f003 030f 	and.w	r3, r3, #15
 8000c6a:	3b04      	subs	r3, #4
 8000c6c:	0112      	lsls	r2, r2, #4
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	440b      	add	r3, r1
 8000c72:	761a      	strb	r2, [r3, #24]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000e100 	.word	0xe000e100
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b089      	sub	sp, #36	; 0x24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	bf28      	it	cs
 8000ca6:	2304      	movcs	r3, #4
 8000ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3304      	adds	r3, #4
 8000cae:	2b06      	cmp	r3, #6
 8000cb0:	d902      	bls.n	8000cb8 <NVIC_EncodePriority+0x30>
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3b03      	subs	r3, #3
 8000cb6:	e000      	b.n	8000cba <NVIC_EncodePriority+0x32>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43da      	mvns	r2, r3
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	401a      	ands	r2, r3
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cda:	43d9      	mvns	r1, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	4313      	orrs	r3, r2
         );
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3724      	adds	r7, #36	; 0x24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
	...

08000cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d00:	d301      	bcc.n	8000d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d02:	2301      	movs	r3, #1
 8000d04:	e00f      	b.n	8000d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d06:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <SysTick_Config+0x40>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d0e:	210f      	movs	r1, #15
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295
 8000d14:	f7ff ff8e 	bl	8000c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <SysTick_Config+0x40>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1e:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <SysTick_Config+0x40>)
 8000d20:	2207      	movs	r2, #7
 8000d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	e000e010 	.word	0xe000e010

08000d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff ff29 	bl	8000b94 <__NVIC_SetPriorityGrouping>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b086      	sub	sp, #24
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	4603      	mov	r3, r0
 8000d52:	60b9      	str	r1, [r7, #8]
 8000d54:	607a      	str	r2, [r7, #4]
 8000d56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d5c:	f7ff ff3e 	bl	8000bdc <__NVIC_GetPriorityGrouping>
 8000d60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	68b9      	ldr	r1, [r7, #8]
 8000d66:	6978      	ldr	r0, [r7, #20]
 8000d68:	f7ff ff8e 	bl	8000c88 <NVIC_EncodePriority>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d72:	4611      	mov	r1, r2
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff5d 	bl	8000c34 <__NVIC_SetPriority>
}
 8000d7a:	bf00      	nop
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff31 	bl	8000bf8 <__NVIC_EnableIRQ>
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ffa2 	bl	8000cf0 <SysTick_Config>
 8000dac:	4603      	mov	r3, r0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d004      	beq.n	8000dd4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2280      	movs	r2, #128	; 0x80
 8000dce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e00c      	b.n	8000dee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2205      	movs	r2, #5
 8000dd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f022 0201 	bic.w	r2, r2, #1
 8000dea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
	...

08000dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
 8000e16:	e177      	b.n	8001108 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e18:	2201      	movs	r2, #1
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	697a      	ldr	r2, [r7, #20]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	f040 8166 	bne.w	8001102 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d00b      	beq.n	8000e56 <HAL_GPIO_Init+0x5a>
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d007      	beq.n	8000e56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e4a:	2b11      	cmp	r3, #17
 8000e4c:	d003      	beq.n	8000e56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	2b12      	cmp	r3, #18
 8000e54:	d130      	bne.n	8000eb8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	2203      	movs	r2, #3
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	68da      	ldr	r2, [r3, #12]
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	091b      	lsrs	r3, r3, #4
 8000ea2:	f003 0201 	and.w	r2, r3, #1
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0xfc>
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2b12      	cmp	r3, #18
 8000ef6:	d123      	bne.n	8000f40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	08da      	lsrs	r2, r3, #3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3208      	adds	r2, #8
 8000f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	f003 0307 	and.w	r3, r3, #7
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	220f      	movs	r2, #15
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	691a      	ldr	r2, [r3, #16]
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	08da      	lsrs	r2, r3, #3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3208      	adds	r2, #8
 8000f3a:	69b9      	ldr	r1, [r7, #24]
 8000f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0203 	and.w	r2, r3, #3
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f000 80c0 	beq.w	8001102 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	4b66      	ldr	r3, [pc, #408]	; (8001120 <HAL_GPIO_Init+0x324>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	4a65      	ldr	r2, [pc, #404]	; (8001120 <HAL_GPIO_Init+0x324>)
 8000f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f90:	6453      	str	r3, [r2, #68]	; 0x44
 8000f92:	4b63      	ldr	r3, [pc, #396]	; (8001120 <HAL_GPIO_Init+0x324>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f9e:	4a61      	ldr	r2, [pc, #388]	; (8001124 <HAL_GPIO_Init+0x328>)
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	089b      	lsrs	r3, r3, #2
 8000fa4:	3302      	adds	r3, #2
 8000fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	220f      	movs	r2, #15
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a58      	ldr	r2, [pc, #352]	; (8001128 <HAL_GPIO_Init+0x32c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d037      	beq.n	800103a <HAL_GPIO_Init+0x23e>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a57      	ldr	r2, [pc, #348]	; (800112c <HAL_GPIO_Init+0x330>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d031      	beq.n	8001036 <HAL_GPIO_Init+0x23a>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a56      	ldr	r2, [pc, #344]	; (8001130 <HAL_GPIO_Init+0x334>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d02b      	beq.n	8001032 <HAL_GPIO_Init+0x236>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a55      	ldr	r2, [pc, #340]	; (8001134 <HAL_GPIO_Init+0x338>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d025      	beq.n	800102e <HAL_GPIO_Init+0x232>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a54      	ldr	r2, [pc, #336]	; (8001138 <HAL_GPIO_Init+0x33c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d01f      	beq.n	800102a <HAL_GPIO_Init+0x22e>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a53      	ldr	r2, [pc, #332]	; (800113c <HAL_GPIO_Init+0x340>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d019      	beq.n	8001026 <HAL_GPIO_Init+0x22a>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a52      	ldr	r2, [pc, #328]	; (8001140 <HAL_GPIO_Init+0x344>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d013      	beq.n	8001022 <HAL_GPIO_Init+0x226>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a51      	ldr	r2, [pc, #324]	; (8001144 <HAL_GPIO_Init+0x348>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d00d      	beq.n	800101e <HAL_GPIO_Init+0x222>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a50      	ldr	r2, [pc, #320]	; (8001148 <HAL_GPIO_Init+0x34c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d007      	beq.n	800101a <HAL_GPIO_Init+0x21e>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4f      	ldr	r2, [pc, #316]	; (800114c <HAL_GPIO_Init+0x350>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d101      	bne.n	8001016 <HAL_GPIO_Init+0x21a>
 8001012:	2309      	movs	r3, #9
 8001014:	e012      	b.n	800103c <HAL_GPIO_Init+0x240>
 8001016:	230a      	movs	r3, #10
 8001018:	e010      	b.n	800103c <HAL_GPIO_Init+0x240>
 800101a:	2308      	movs	r3, #8
 800101c:	e00e      	b.n	800103c <HAL_GPIO_Init+0x240>
 800101e:	2307      	movs	r3, #7
 8001020:	e00c      	b.n	800103c <HAL_GPIO_Init+0x240>
 8001022:	2306      	movs	r3, #6
 8001024:	e00a      	b.n	800103c <HAL_GPIO_Init+0x240>
 8001026:	2305      	movs	r3, #5
 8001028:	e008      	b.n	800103c <HAL_GPIO_Init+0x240>
 800102a:	2304      	movs	r3, #4
 800102c:	e006      	b.n	800103c <HAL_GPIO_Init+0x240>
 800102e:	2303      	movs	r3, #3
 8001030:	e004      	b.n	800103c <HAL_GPIO_Init+0x240>
 8001032:	2302      	movs	r3, #2
 8001034:	e002      	b.n	800103c <HAL_GPIO_Init+0x240>
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <HAL_GPIO_Init+0x240>
 800103a:	2300      	movs	r3, #0
 800103c:	69fa      	ldr	r2, [r7, #28]
 800103e:	f002 0203 	and.w	r2, r2, #3
 8001042:	0092      	lsls	r2, r2, #2
 8001044:	4093      	lsls	r3, r2
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800104c:	4935      	ldr	r1, [pc, #212]	; (8001124 <HAL_GPIO_Init+0x328>)
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	089b      	lsrs	r3, r3, #2
 8001052:	3302      	adds	r3, #2
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800105a:	4b3d      	ldr	r3, [pc, #244]	; (8001150 <HAL_GPIO_Init+0x354>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	43db      	mvns	r3, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4013      	ands	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800107e:	4a34      	ldr	r2, [pc, #208]	; (8001150 <HAL_GPIO_Init+0x354>)
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001084:	4b32      	ldr	r3, [pc, #200]	; (8001150 <HAL_GPIO_Init+0x354>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010a8:	4a29      	ldr	r2, [pc, #164]	; (8001150 <HAL_GPIO_Init+0x354>)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ae:	4b28      	ldr	r3, [pc, #160]	; (8001150 <HAL_GPIO_Init+0x354>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010d2:	4a1f      	ldr	r2, [pc, #124]	; (8001150 <HAL_GPIO_Init+0x354>)
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010d8:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <HAL_GPIO_Init+0x354>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010fc:	4a14      	ldr	r2, [pc, #80]	; (8001150 <HAL_GPIO_Init+0x354>)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3301      	adds	r3, #1
 8001106:	61fb      	str	r3, [r7, #28]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	2b0f      	cmp	r3, #15
 800110c:	f67f ae84 	bls.w	8000e18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3724      	adds	r7, #36	; 0x24
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40023800 	.word	0x40023800
 8001124:	40013800 	.word	0x40013800
 8001128:	40020000 	.word	0x40020000
 800112c:	40020400 	.word	0x40020400
 8001130:	40020800 	.word	0x40020800
 8001134:	40020c00 	.word	0x40020c00
 8001138:	40021000 	.word	0x40021000
 800113c:	40021400 	.word	0x40021400
 8001140:	40021800 	.word	0x40021800
 8001144:	40021c00 	.word	0x40021c00
 8001148:	40022000 	.word	0x40022000
 800114c:	40022400 	.word	0x40022400
 8001150:	40013c00 	.word	0x40013c00

08001154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	807b      	strh	r3, [r7, #2]
 8001160:	4613      	mov	r3, r2
 8001162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001164:	787b      	ldrb	r3, [r7, #1]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800116a:	887a      	ldrh	r2, [r7, #2]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001170:	e003      	b.n	800117a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001172:	887b      	ldrh	r3, [r7, #2]
 8001174:	041a      	lsls	r2, r3, #16
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	619a      	str	r2, [r3, #24]
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
 800118e:	460b      	mov	r3, r1
 8001190:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	695a      	ldr	r2, [r3, #20]
 8001196:	887b      	ldrh	r3, [r7, #2]
 8001198:	401a      	ands	r2, r3
 800119a:	887b      	ldrh	r3, [r7, #2]
 800119c:	429a      	cmp	r2, r3
 800119e:	d104      	bne.n	80011aa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80011a0:	887b      	ldrh	r3, [r7, #2]
 80011a2:	041a      	lsls	r2, r3, #16
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80011a8:	e002      	b.n	80011b0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80011aa:	887a      	ldrh	r2, [r7, #2]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	619a      	str	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d101      	bne.n	80011ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e25b      	b.n	8001686 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d075      	beq.n	80012c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011da:	4ba3      	ldr	r3, [pc, #652]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 030c 	and.w	r3, r3, #12
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	d00c      	beq.n	8001200 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011e6:	4ba0      	ldr	r3, [pc, #640]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011ee:	2b08      	cmp	r3, #8
 80011f0:	d112      	bne.n	8001218 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011f2:	4b9d      	ldr	r3, [pc, #628]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011fe:	d10b      	bne.n	8001218 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001200:	4b99      	ldr	r3, [pc, #612]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d05b      	beq.n	80012c4 <HAL_RCC_OscConfig+0x108>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d157      	bne.n	80012c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e236      	b.n	8001686 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001220:	d106      	bne.n	8001230 <HAL_RCC_OscConfig+0x74>
 8001222:	4b91      	ldr	r3, [pc, #580]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a90      	ldr	r2, [pc, #576]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 8001228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	e01d      	b.n	800126c <HAL_RCC_OscConfig+0xb0>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001238:	d10c      	bne.n	8001254 <HAL_RCC_OscConfig+0x98>
 800123a:	4b8b      	ldr	r3, [pc, #556]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a8a      	ldr	r2, [pc, #552]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 8001240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	4b88      	ldr	r3, [pc, #544]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a87      	ldr	r2, [pc, #540]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 800124c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	e00b      	b.n	800126c <HAL_RCC_OscConfig+0xb0>
 8001254:	4b84      	ldr	r3, [pc, #528]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a83      	ldr	r2, [pc, #524]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 800125a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	4b81      	ldr	r3, [pc, #516]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a80      	ldr	r2, [pc, #512]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 8001266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800126a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d013      	beq.n	800129c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001274:	f7ff fc82 	bl	8000b7c <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800127c:	f7ff fc7e 	bl	8000b7c <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b64      	cmp	r3, #100	; 0x64
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e1fb      	b.n	8001686 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128e:	4b76      	ldr	r3, [pc, #472]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f0      	beq.n	800127c <HAL_RCC_OscConfig+0xc0>
 800129a:	e014      	b.n	80012c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129c:	f7ff fc6e 	bl	8000b7c <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012a4:	f7ff fc6a 	bl	8000b7c <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b64      	cmp	r3, #100	; 0x64
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e1e7      	b.n	8001686 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b6:	4b6c      	ldr	r3, [pc, #432]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f0      	bne.n	80012a4 <HAL_RCC_OscConfig+0xe8>
 80012c2:	e000      	b.n	80012c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d063      	beq.n	800139a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012d2:	4b65      	ldr	r3, [pc, #404]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 030c 	and.w	r3, r3, #12
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d00b      	beq.n	80012f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012de:	4b62      	ldr	r3, [pc, #392]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012e6:	2b08      	cmp	r3, #8
 80012e8:	d11c      	bne.n	8001324 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ea:	4b5f      	ldr	r3, [pc, #380]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d116      	bne.n	8001324 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f6:	4b5c      	ldr	r3, [pc, #368]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d005      	beq.n	800130e <HAL_RCC_OscConfig+0x152>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d001      	beq.n	800130e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e1bb      	b.n	8001686 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130e:	4b56      	ldr	r3, [pc, #344]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	4952      	ldr	r1, [pc, #328]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 800131e:	4313      	orrs	r3, r2
 8001320:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001322:	e03a      	b.n	800139a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d020      	beq.n	800136e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800132c:	4b4f      	ldr	r3, [pc, #316]	; (800146c <HAL_RCC_OscConfig+0x2b0>)
 800132e:	2201      	movs	r2, #1
 8001330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001332:	f7ff fc23 	bl	8000b7c <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800133a:	f7ff fc1f 	bl	8000b7c <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e19c      	b.n	8001686 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134c:	4b46      	ldr	r3, [pc, #280]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0f0      	beq.n	800133a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001358:	4b43      	ldr	r3, [pc, #268]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	4940      	ldr	r1, [pc, #256]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 8001368:	4313      	orrs	r3, r2
 800136a:	600b      	str	r3, [r1, #0]
 800136c:	e015      	b.n	800139a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800136e:	4b3f      	ldr	r3, [pc, #252]	; (800146c <HAL_RCC_OscConfig+0x2b0>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001374:	f7ff fc02 	bl	8000b7c <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800137c:	f7ff fbfe 	bl	8000b7c <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e17b      	b.n	8001686 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138e:	4b36      	ldr	r3, [pc, #216]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f0      	bne.n	800137c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d030      	beq.n	8001408 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d016      	beq.n	80013dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ae:	4b30      	ldr	r3, [pc, #192]	; (8001470 <HAL_RCC_OscConfig+0x2b4>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b4:	f7ff fbe2 	bl	8000b7c <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013bc:	f7ff fbde 	bl	8000b7c <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e15b      	b.n	8001686 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ce:	4b26      	ldr	r3, [pc, #152]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0f0      	beq.n	80013bc <HAL_RCC_OscConfig+0x200>
 80013da:	e015      	b.n	8001408 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013dc:	4b24      	ldr	r3, [pc, #144]	; (8001470 <HAL_RCC_OscConfig+0x2b4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e2:	f7ff fbcb 	bl	8000b7c <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ea:	f7ff fbc7 	bl	8000b7c <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e144      	b.n	8001686 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fc:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 80013fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f0      	bne.n	80013ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 80a0 	beq.w	8001556 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001416:	2300      	movs	r3, #0
 8001418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10f      	bne.n	8001446 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	4a0e      	ldr	r2, [pc, #56]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 8001430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001434:	6413      	str	r3, [r2, #64]	; 0x40
 8001436:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <HAL_RCC_OscConfig+0x2ac>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001442:	2301      	movs	r3, #1
 8001444:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_RCC_OscConfig+0x2b8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144e:	2b00      	cmp	r3, #0
 8001450:	d121      	bne.n	8001496 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <HAL_RCC_OscConfig+0x2b8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a07      	ldr	r2, [pc, #28]	; (8001474 <HAL_RCC_OscConfig+0x2b8>)
 8001458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800145e:	f7ff fb8d 	bl	8000b7c <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001464:	e011      	b.n	800148a <HAL_RCC_OscConfig+0x2ce>
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800
 800146c:	42470000 	.word	0x42470000
 8001470:	42470e80 	.word	0x42470e80
 8001474:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001478:	f7ff fb80 	bl	8000b7c <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e0fd      	b.n	8001686 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148a:	4b81      	ldr	r3, [pc, #516]	; (8001690 <HAL_RCC_OscConfig+0x4d4>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0f0      	beq.n	8001478 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d106      	bne.n	80014ac <HAL_RCC_OscConfig+0x2f0>
 800149e:	4b7d      	ldr	r3, [pc, #500]	; (8001694 <HAL_RCC_OscConfig+0x4d8>)
 80014a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a2:	4a7c      	ldr	r2, [pc, #496]	; (8001694 <HAL_RCC_OscConfig+0x4d8>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6713      	str	r3, [r2, #112]	; 0x70
 80014aa:	e01c      	b.n	80014e6 <HAL_RCC_OscConfig+0x32a>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	2b05      	cmp	r3, #5
 80014b2:	d10c      	bne.n	80014ce <HAL_RCC_OscConfig+0x312>
 80014b4:	4b77      	ldr	r3, [pc, #476]	; (8001694 <HAL_RCC_OscConfig+0x4d8>)
 80014b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b8:	4a76      	ldr	r2, [pc, #472]	; (8001694 <HAL_RCC_OscConfig+0x4d8>)
 80014ba:	f043 0304 	orr.w	r3, r3, #4
 80014be:	6713      	str	r3, [r2, #112]	; 0x70
 80014c0:	4b74      	ldr	r3, [pc, #464]	; (8001694 <HAL_RCC_OscConfig+0x4d8>)
 80014c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c4:	4a73      	ldr	r2, [pc, #460]	; (8001694 <HAL_RCC_OscConfig+0x4d8>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	6713      	str	r3, [r2, #112]	; 0x70
 80014cc:	e00b      	b.n	80014e6 <HAL_RCC_OscConfig+0x32a>
 80014ce:	4b71      	ldr	r3, [pc, #452]	; (8001694 <HAL_RCC_OscConfig+0x4d8>)
 80014d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d2:	4a70      	ldr	r2, [pc, #448]	; (8001694 <HAL_RCC_OscConfig+0x4d8>)
 80014d4:	f023 0301 	bic.w	r3, r3, #1
 80014d8:	6713      	str	r3, [r2, #112]	; 0x70
 80014da:	4b6e      	ldr	r3, [pc, #440]	; (8001694 <HAL_RCC_OscConfig+0x4d8>)
 80014dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014de:	4a6d      	ldr	r2, [pc, #436]	; (8001694 <HAL_RCC_OscConfig+0x4d8>)
 80014e0:	f023 0304 	bic.w	r3, r3, #4
 80014e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d015      	beq.n	800151a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ee:	f7ff fb45 	bl	8000b7c <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f4:	e00a      	b.n	800150c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014f6:	f7ff fb41 	bl	8000b7c <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	f241 3288 	movw	r2, #5000	; 0x1388
 8001504:	4293      	cmp	r3, r2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e0bc      	b.n	8001686 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800150c:	4b61      	ldr	r3, [pc, #388]	; (8001694 <HAL_RCC_OscConfig+0x4d8>)
 800150e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0ee      	beq.n	80014f6 <HAL_RCC_OscConfig+0x33a>
 8001518:	e014      	b.n	8001544 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151a:	f7ff fb2f 	bl	8000b7c <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001520:	e00a      	b.n	8001538 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001522:	f7ff fb2b 	bl	8000b7c <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001530:	4293      	cmp	r3, r2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e0a6      	b.n	8001686 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001538:	4b56      	ldr	r3, [pc, #344]	; (8001694 <HAL_RCC_OscConfig+0x4d8>)
 800153a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1ee      	bne.n	8001522 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001544:	7dfb      	ldrb	r3, [r7, #23]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d105      	bne.n	8001556 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800154a:	4b52      	ldr	r3, [pc, #328]	; (8001694 <HAL_RCC_OscConfig+0x4d8>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	4a51      	ldr	r2, [pc, #324]	; (8001694 <HAL_RCC_OscConfig+0x4d8>)
 8001550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001554:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 8092 	beq.w	8001684 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001560:	4b4c      	ldr	r3, [pc, #304]	; (8001694 <HAL_RCC_OscConfig+0x4d8>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 030c 	and.w	r3, r3, #12
 8001568:	2b08      	cmp	r3, #8
 800156a:	d05c      	beq.n	8001626 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	2b02      	cmp	r3, #2
 8001572:	d141      	bne.n	80015f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001574:	4b48      	ldr	r3, [pc, #288]	; (8001698 <HAL_RCC_OscConfig+0x4dc>)
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157a:	f7ff faff 	bl	8000b7c <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001582:	f7ff fafb 	bl	8000b7c <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e078      	b.n	8001686 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001594:	4b3f      	ldr	r3, [pc, #252]	; (8001694 <HAL_RCC_OscConfig+0x4d8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1f0      	bne.n	8001582 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	69da      	ldr	r2, [r3, #28]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	431a      	orrs	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ae:	019b      	lsls	r3, r3, #6
 80015b0:	431a      	orrs	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b6:	085b      	lsrs	r3, r3, #1
 80015b8:	3b01      	subs	r3, #1
 80015ba:	041b      	lsls	r3, r3, #16
 80015bc:	431a      	orrs	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c2:	061b      	lsls	r3, r3, #24
 80015c4:	4933      	ldr	r1, [pc, #204]	; (8001694 <HAL_RCC_OscConfig+0x4d8>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015ca:	4b33      	ldr	r3, [pc, #204]	; (8001698 <HAL_RCC_OscConfig+0x4dc>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff fad4 	bl	8000b7c <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d8:	f7ff fad0 	bl	8000b7c <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e04d      	b.n	8001686 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ea:	4b2a      	ldr	r3, [pc, #168]	; (8001694 <HAL_RCC_OscConfig+0x4d8>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f0      	beq.n	80015d8 <HAL_RCC_OscConfig+0x41c>
 80015f6:	e045      	b.n	8001684 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f8:	4b27      	ldr	r3, [pc, #156]	; (8001698 <HAL_RCC_OscConfig+0x4dc>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fe:	f7ff fabd 	bl	8000b7c <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001606:	f7ff fab9 	bl	8000b7c <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e036      	b.n	8001686 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001618:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <HAL_RCC_OscConfig+0x4d8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1f0      	bne.n	8001606 <HAL_RCC_OscConfig+0x44a>
 8001624:	e02e      	b.n	8001684 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d101      	bne.n	8001632 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e029      	b.n	8001686 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001632:	4b18      	ldr	r3, [pc, #96]	; (8001694 <HAL_RCC_OscConfig+0x4d8>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	429a      	cmp	r2, r3
 8001644:	d11c      	bne.n	8001680 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001650:	429a      	cmp	r2, r3
 8001652:	d115      	bne.n	8001680 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800165a:	4013      	ands	r3, r2
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001660:	4293      	cmp	r3, r2
 8001662:	d10d      	bne.n	8001680 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800166e:	429a      	cmp	r2, r3
 8001670:	d106      	bne.n	8001680 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800167c:	429a      	cmp	r2, r3
 800167e:	d001      	beq.n	8001684 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e000      	b.n	8001686 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40007000 	.word	0x40007000
 8001694:	40023800 	.word	0x40023800
 8001698:	42470060 	.word	0x42470060

0800169c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e0cc      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016b0:	4b68      	ldr	r3, [pc, #416]	; (8001854 <HAL_RCC_ClockConfig+0x1b8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 030f 	and.w	r3, r3, #15
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d90c      	bls.n	80016d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016be:	4b65      	ldr	r3, [pc, #404]	; (8001854 <HAL_RCC_ClockConfig+0x1b8>)
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c6:	4b63      	ldr	r3, [pc, #396]	; (8001854 <HAL_RCC_ClockConfig+0x1b8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d001      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e0b8      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d020      	beq.n	8001726 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d005      	beq.n	80016fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016f0:	4b59      	ldr	r3, [pc, #356]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	4a58      	ldr	r2, [pc, #352]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	2b00      	cmp	r3, #0
 8001706:	d005      	beq.n	8001714 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001708:	4b53      	ldr	r3, [pc, #332]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	4a52      	ldr	r2, [pc, #328]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001712:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001714:	4b50      	ldr	r3, [pc, #320]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	494d      	ldr	r1, [pc, #308]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	4313      	orrs	r3, r2
 8001724:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d044      	beq.n	80017bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d107      	bne.n	800174a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173a:	4b47      	ldr	r3, [pc, #284]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d119      	bne.n	800177a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e07f      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b02      	cmp	r3, #2
 8001750:	d003      	beq.n	800175a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001756:	2b03      	cmp	r3, #3
 8001758:	d107      	bne.n	800176a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800175a:	4b3f      	ldr	r3, [pc, #252]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d109      	bne.n	800177a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e06f      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176a:	4b3b      	ldr	r3, [pc, #236]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e067      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800177a:	4b37      	ldr	r3, [pc, #220]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f023 0203 	bic.w	r2, r3, #3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	4934      	ldr	r1, [pc, #208]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	4313      	orrs	r3, r2
 800178a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800178c:	f7ff f9f6 	bl	8000b7c <HAL_GetTick>
 8001790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001792:	e00a      	b.n	80017aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001794:	f7ff f9f2 	bl	8000b7c <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e04f      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017aa:	4b2b      	ldr	r3, [pc, #172]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 020c 	and.w	r2, r3, #12
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d1eb      	bne.n	8001794 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017bc:	4b25      	ldr	r3, [pc, #148]	; (8001854 <HAL_RCC_ClockConfig+0x1b8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 030f 	and.w	r3, r3, #15
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d20c      	bcs.n	80017e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ca:	4b22      	ldr	r3, [pc, #136]	; (8001854 <HAL_RCC_ClockConfig+0x1b8>)
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d2:	4b20      	ldr	r3, [pc, #128]	; (8001854 <HAL_RCC_ClockConfig+0x1b8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d001      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e032      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d008      	beq.n	8001802 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017f0:	4b19      	ldr	r3, [pc, #100]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	4916      	ldr	r1, [pc, #88]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	2b00      	cmp	r3, #0
 800180c:	d009      	beq.n	8001822 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800180e:	4b12      	ldr	r3, [pc, #72]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	490e      	ldr	r1, [pc, #56]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	4313      	orrs	r3, r2
 8001820:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001822:	f000 f821 	bl	8001868 <HAL_RCC_GetSysClockFreq>
 8001826:	4602      	mov	r2, r0
 8001828:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	091b      	lsrs	r3, r3, #4
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	490a      	ldr	r1, [pc, #40]	; (800185c <HAL_RCC_ClockConfig+0x1c0>)
 8001834:	5ccb      	ldrb	r3, [r1, r3]
 8001836:	fa22 f303 	lsr.w	r3, r2, r3
 800183a:	4a09      	ldr	r2, [pc, #36]	; (8001860 <HAL_RCC_ClockConfig+0x1c4>)
 800183c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <HAL_RCC_ClockConfig+0x1c8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff f96a 	bl	8000b1c <HAL_InitTick>

  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023c00 	.word	0x40023c00
 8001858:	40023800 	.word	0x40023800
 800185c:	080029c8 	.word	0x080029c8
 8001860:	20000010 	.word	0x20000010
 8001864:	20000014 	.word	0x20000014

08001868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001868:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800186c:	b084      	sub	sp, #16
 800186e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	2300      	movs	r3, #0
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	2300      	movs	r3, #0
 800187a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001880:	4b67      	ldr	r3, [pc, #412]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 030c 	and.w	r3, r3, #12
 8001888:	2b08      	cmp	r3, #8
 800188a:	d00d      	beq.n	80018a8 <HAL_RCC_GetSysClockFreq+0x40>
 800188c:	2b08      	cmp	r3, #8
 800188e:	f200 80bd 	bhi.w	8001a0c <HAL_RCC_GetSysClockFreq+0x1a4>
 8001892:	2b00      	cmp	r3, #0
 8001894:	d002      	beq.n	800189c <HAL_RCC_GetSysClockFreq+0x34>
 8001896:	2b04      	cmp	r3, #4
 8001898:	d003      	beq.n	80018a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800189a:	e0b7      	b.n	8001a0c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800189c:	4b61      	ldr	r3, [pc, #388]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800189e:	60bb      	str	r3, [r7, #8]
       break;
 80018a0:	e0b7      	b.n	8001a12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018a2:	4b61      	ldr	r3, [pc, #388]	; (8001a28 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80018a4:	60bb      	str	r3, [r7, #8]
      break;
 80018a6:	e0b4      	b.n	8001a12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018a8:	4b5d      	ldr	r3, [pc, #372]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018b2:	4b5b      	ldr	r3, [pc, #364]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d04d      	beq.n	800195a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018be:	4b58      	ldr	r3, [pc, #352]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	099b      	lsrs	r3, r3, #6
 80018c4:	461a      	mov	r2, r3
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018ce:	f04f 0100 	mov.w	r1, #0
 80018d2:	ea02 0800 	and.w	r8, r2, r0
 80018d6:	ea03 0901 	and.w	r9, r3, r1
 80018da:	4640      	mov	r0, r8
 80018dc:	4649      	mov	r1, r9
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	014b      	lsls	r3, r1, #5
 80018e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018ec:	0142      	lsls	r2, r0, #5
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	ebb0 0008 	subs.w	r0, r0, r8
 80018f6:	eb61 0109 	sbc.w	r1, r1, r9
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	018b      	lsls	r3, r1, #6
 8001904:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001908:	0182      	lsls	r2, r0, #6
 800190a:	1a12      	subs	r2, r2, r0
 800190c:	eb63 0301 	sbc.w	r3, r3, r1
 8001910:	f04f 0000 	mov.w	r0, #0
 8001914:	f04f 0100 	mov.w	r1, #0
 8001918:	00d9      	lsls	r1, r3, #3
 800191a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800191e:	00d0      	lsls	r0, r2, #3
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	eb12 0208 	adds.w	r2, r2, r8
 8001928:	eb43 0309 	adc.w	r3, r3, r9
 800192c:	f04f 0000 	mov.w	r0, #0
 8001930:	f04f 0100 	mov.w	r1, #0
 8001934:	0259      	lsls	r1, r3, #9
 8001936:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800193a:	0250      	lsls	r0, r2, #9
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	461a      	mov	r2, r3
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	f7fe fc4e 	bl	80001ec <__aeabi_uldivmod>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4613      	mov	r3, r2
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	e04a      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800195a:	4b31      	ldr	r3, [pc, #196]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	099b      	lsrs	r3, r3, #6
 8001960:	461a      	mov	r2, r3
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	f240 10ff 	movw	r0, #511	; 0x1ff
 800196a:	f04f 0100 	mov.w	r1, #0
 800196e:	ea02 0400 	and.w	r4, r2, r0
 8001972:	ea03 0501 	and.w	r5, r3, r1
 8001976:	4620      	mov	r0, r4
 8001978:	4629      	mov	r1, r5
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	014b      	lsls	r3, r1, #5
 8001984:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001988:	0142      	lsls	r2, r0, #5
 800198a:	4610      	mov	r0, r2
 800198c:	4619      	mov	r1, r3
 800198e:	1b00      	subs	r0, r0, r4
 8001990:	eb61 0105 	sbc.w	r1, r1, r5
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	f04f 0300 	mov.w	r3, #0
 800199c:	018b      	lsls	r3, r1, #6
 800199e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019a2:	0182      	lsls	r2, r0, #6
 80019a4:	1a12      	subs	r2, r2, r0
 80019a6:	eb63 0301 	sbc.w	r3, r3, r1
 80019aa:	f04f 0000 	mov.w	r0, #0
 80019ae:	f04f 0100 	mov.w	r1, #0
 80019b2:	00d9      	lsls	r1, r3, #3
 80019b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019b8:	00d0      	lsls	r0, r2, #3
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	1912      	adds	r2, r2, r4
 80019c0:	eb45 0303 	adc.w	r3, r5, r3
 80019c4:	f04f 0000 	mov.w	r0, #0
 80019c8:	f04f 0100 	mov.w	r1, #0
 80019cc:	0299      	lsls	r1, r3, #10
 80019ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80019d2:	0290      	lsls	r0, r2, #10
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	461a      	mov	r2, r3
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	f7fe fc02 	bl	80001ec <__aeabi_uldivmod>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4613      	mov	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	0c1b      	lsrs	r3, r3, #16
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	3301      	adds	r3, #1
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a08:	60bb      	str	r3, [r7, #8]
      break;
 8001a0a:	e002      	b.n	8001a12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a0e:	60bb      	str	r3, [r7, #8]
      break;
 8001a10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a12:	68bb      	ldr	r3, [r7, #8]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a1e:	bf00      	nop
 8001a20:	40023800 	.word	0x40023800
 8001a24:	00f42400 	.word	0x00f42400
 8001a28:	007a1200 	.word	0x007a1200

08001a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a30:	4b03      	ldr	r3, [pc, #12]	; (8001a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a32:	681b      	ldr	r3, [r3, #0]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20000010 	.word	0x20000010

08001a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a48:	f7ff fff0 	bl	8001a2c <HAL_RCC_GetHCLKFreq>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	0a9b      	lsrs	r3, r3, #10
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	4903      	ldr	r1, [pc, #12]	; (8001a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a5a:	5ccb      	ldrb	r3, [r1, r3]
 8001a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40023800 	.word	0x40023800
 8001a68:	080029d8 	.word	0x080029d8

08001a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a70:	f7ff ffdc 	bl	8001a2c <HAL_RCC_GetHCLKFreq>
 8001a74:	4602      	mov	r2, r0
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	0b5b      	lsrs	r3, r3, #13
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	4903      	ldr	r1, [pc, #12]	; (8001a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a82:	5ccb      	ldrb	r3, [r1, r3]
 8001a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	080029d8 	.word	0x080029d8

08001a94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e03f      	b.n	8001b26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d106      	bne.n	8001ac0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7fe feca 	bl	8000854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2224      	movs	r2, #36	; 0x24
 8001ac4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ad6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 fba1 	bl	8002220 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	691a      	ldr	r2, [r3, #16]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001aec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	695a      	ldr	r2, [r3, #20]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001afc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2220      	movs	r2, #32
 8001b18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b088      	sub	sp, #32
 8001b32:	af02      	add	r7, sp, #8
 8001b34:	60f8      	str	r0, [r7, #12]
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	603b      	str	r3, [r7, #0]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b20      	cmp	r3, #32
 8001b4c:	f040 8083 	bne.w	8001c56 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d002      	beq.n	8001b5c <HAL_UART_Transmit+0x2e>
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e07b      	b.n	8001c58 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d101      	bne.n	8001b6e <HAL_UART_Transmit+0x40>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e074      	b.n	8001c58 <HAL_UART_Transmit+0x12a>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2221      	movs	r2, #33	; 0x21
 8001b80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001b84:	f7fe fffa 	bl	8000b7c <HAL_GetTick>
 8001b88:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	88fa      	ldrh	r2, [r7, #6]
 8001b8e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	88fa      	ldrh	r2, [r7, #6]
 8001b94:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001b9e:	e042      	b.n	8001c26 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bb6:	d122      	bne.n	8001bfe <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2180      	movs	r1, #128	; 0x80
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f000 f9c0 	bl	8001f48 <UART_WaitOnFlagUntilTimeout>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e042      	b.n	8001c58 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001be4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d103      	bne.n	8001bf6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	3302      	adds	r3, #2
 8001bf2:	60bb      	str	r3, [r7, #8]
 8001bf4:	e017      	b.n	8001c26 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	e013      	b.n	8001c26 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2200      	movs	r2, #0
 8001c06:	2180      	movs	r1, #128	; 0x80
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f000 f99d 	bl	8001f48 <UART_WaitOnFlagUntilTimeout>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e01f      	b.n	8001c58 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	60ba      	str	r2, [r7, #8]
 8001c1e:	781a      	ldrb	r2, [r3, #0]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1b7      	bne.n	8001ba0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	2200      	movs	r2, #0
 8001c38:	2140      	movs	r1, #64	; 0x40
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f000 f984 	bl	8001f48 <UART_WaitOnFlagUntilTimeout>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e006      	b.n	8001c58 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2220      	movs	r2, #32
 8001c4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e000      	b.n	8001c58 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001c56:	2302      	movs	r3, #2
  }
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b20      	cmp	r3, #32
 8001c78:	d140      	bne.n	8001cfc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <HAL_UART_Receive_IT+0x26>
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e039      	b.n	8001cfe <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d101      	bne.n	8001c98 <HAL_UART_Receive_IT+0x38>
 8001c94:	2302      	movs	r3, #2
 8001c96:	e032      	b.n	8001cfe <HAL_UART_Receive_IT+0x9e>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	88fa      	ldrh	r2, [r7, #6]
 8001caa:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	88fa      	ldrh	r2, [r7, #6]
 8001cb0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2222      	movs	r2, #34	; 0x22
 8001cbc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cd6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	695a      	ldr	r2, [r3, #20]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0201 	orr.w	r2, r2, #1
 8001ce6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68da      	ldr	r2, [r3, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0220 	orr.w	r2, r2, #32
 8001cf6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e000      	b.n	8001cfe <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001cfc:	2302      	movs	r3, #2
  }
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
	...

08001d0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b088      	sub	sp, #32
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10d      	bne.n	8001d5e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	f003 0320 	and.w	r3, r3, #32
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d008      	beq.n	8001d5e <HAL_UART_IRQHandler+0x52>
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	f003 0320 	and.w	r3, r3, #32
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f9e0 	bl	800211c <UART_Receive_IT>
      return;
 8001d5c:	e0d0      	b.n	8001f00 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 80b0 	beq.w	8001ec6 <HAL_UART_IRQHandler+0x1ba>
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d105      	bne.n	8001d7c <HAL_UART_IRQHandler+0x70>
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 80a5 	beq.w	8001ec6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00a      	beq.n	8001d9c <HAL_UART_IRQHandler+0x90>
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d94:	f043 0201 	orr.w	r2, r3, #1
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00a      	beq.n	8001dbc <HAL_UART_IRQHandler+0xb0>
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d005      	beq.n	8001dbc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db4:	f043 0202 	orr.w	r2, r3, #2
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00a      	beq.n	8001ddc <HAL_UART_IRQHandler+0xd0>
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd4:	f043 0204 	orr.w	r2, r3, #4
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00f      	beq.n	8001e06 <HAL_UART_IRQHandler+0xfa>
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	f003 0320 	and.w	r3, r3, #32
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d104      	bne.n	8001dfa <HAL_UART_IRQHandler+0xee>
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d005      	beq.n	8001e06 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfe:	f043 0208 	orr.w	r2, r3, #8
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d077      	beq.n	8001efe <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	f003 0320 	and.w	r3, r3, #32
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d007      	beq.n	8001e28 <HAL_UART_IRQHandler+0x11c>
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	f003 0320 	and.w	r3, r3, #32
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d002      	beq.n	8001e28 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f97a 	bl	800211c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e32:	2b40      	cmp	r3, #64	; 0x40
 8001e34:	bf0c      	ite	eq
 8001e36:	2301      	moveq	r3, #1
 8001e38:	2300      	movne	r3, #0
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d102      	bne.n	8001e50 <HAL_UART_IRQHandler+0x144>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d031      	beq.n	8001eb4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f8c3 	bl	8001fdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e60:	2b40      	cmp	r3, #64	; 0x40
 8001e62:	d123      	bne.n	8001eac <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	695a      	ldr	r2, [r3, #20]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e72:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d013      	beq.n	8001ea4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e80:	4a21      	ldr	r2, [pc, #132]	; (8001f08 <HAL_UART_IRQHandler+0x1fc>)
 8001e82:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe ff94 	bl	8000db6 <HAL_DMA_Abort_IT>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d016      	beq.n	8001ec2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ea2:	e00e      	b.n	8001ec2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f845 	bl	8001f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eaa:	e00a      	b.n	8001ec2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f841 	bl	8001f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eb2:	e006      	b.n	8001ec2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f83d 	bl	8001f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001ec0:	e01d      	b.n	8001efe <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ec2:	bf00      	nop
    return;
 8001ec4:	e01b      	b.n	8001efe <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d008      	beq.n	8001ee2 <HAL_UART_IRQHandler+0x1d6>
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f8b0 	bl	8002040 <UART_Transmit_IT>
    return;
 8001ee0:	e00e      	b.n	8001f00 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d009      	beq.n	8001f00 <HAL_UART_IRQHandler+0x1f4>
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d004      	beq.n	8001f00 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f8f8 	bl	80020ec <UART_EndTransmit_IT>
    return;
 8001efc:	e000      	b.n	8001f00 <HAL_UART_IRQHandler+0x1f4>
    return;
 8001efe:	bf00      	nop
  }
}
 8001f00:	3720      	adds	r7, #32
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	08002019 	.word	0x08002019

08001f0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	603b      	str	r3, [r7, #0]
 8001f54:	4613      	mov	r3, r2
 8001f56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f58:	e02c      	b.n	8001fb4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f60:	d028      	beq.n	8001fb4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d007      	beq.n	8001f78 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f68:	f7fe fe08 	bl	8000b7c <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d21d      	bcs.n	8001fb4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001f86:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	695a      	ldr	r2, [r3, #20]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0201 	bic.w	r2, r2, #1
 8001f96:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e00f      	b.n	8001fd4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	bf0c      	ite	eq
 8001fc4:	2301      	moveq	r3, #1
 8001fc6:	2300      	movne	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	461a      	mov	r2, r3
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d0c3      	beq.n	8001f5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001ff2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	695a      	ldr	r2, [r3, #20]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0201 	bic.w	r2, r2, #1
 8002002:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2220      	movs	r2, #32
 8002008:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002024:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f7ff ff7e 	bl	8001f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002038:	bf00      	nop
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b21      	cmp	r3, #33	; 0x21
 8002052:	d144      	bne.n	80020de <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800205c:	d11a      	bne.n	8002094 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002072:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d105      	bne.n	8002088 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	1c9a      	adds	r2, r3, #2
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	621a      	str	r2, [r3, #32]
 8002086:	e00e      	b.n	80020a6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	621a      	str	r2, [r3, #32]
 8002092:	e008      	b.n	80020a6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	1c59      	adds	r1, r3, #1
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6211      	str	r1, [r2, #32]
 800209e:	781a      	ldrb	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	4619      	mov	r1, r3
 80020b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10f      	bne.n	80020da <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	e000      	b.n	80020e0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80020de:	2302      	movs	r3, #2
  }
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002102:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2220      	movs	r2, #32
 8002108:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff fefd 	bl	8001f0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b22      	cmp	r3, #34	; 0x22
 800212e:	d171      	bne.n	8002214 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002138:	d123      	bne.n	8002182 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10e      	bne.n	8002166 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	b29b      	uxth	r3, r3
 8002150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002154:	b29a      	uxth	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215e:	1c9a      	adds	r2, r3, #2
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	629a      	str	r2, [r3, #40]	; 0x28
 8002164:	e029      	b.n	80021ba <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	b29b      	uxth	r3, r3
 800216e:	b2db      	uxtb	r3, r3
 8002170:	b29a      	uxth	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	629a      	str	r2, [r3, #40]	; 0x28
 8002180:	e01b      	b.n	80021ba <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10a      	bne.n	80021a0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6858      	ldr	r0, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002194:	1c59      	adds	r1, r3, #1
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6291      	str	r1, [r2, #40]	; 0x28
 800219a:	b2c2      	uxtb	r2, r0
 800219c:	701a      	strb	r2, [r3, #0]
 800219e:	e00c      	b.n	80021ba <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ac:	1c58      	adds	r0, r3, #1
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	6288      	str	r0, [r1, #40]	; 0x28
 80021b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021be:	b29b      	uxth	r3, r3
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	4619      	mov	r1, r3
 80021c8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d120      	bne.n	8002210 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0220 	bic.w	r2, r2, #32
 80021dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	695a      	ldr	r2, [r3, #20]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0201 	bic.w	r2, r2, #1
 80021fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2220      	movs	r2, #32
 8002202:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff fe8a 	bl	8001f20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800220c:	2300      	movs	r3, #0
 800220e:	e002      	b.n	8002216 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	e000      	b.n	8002216 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002214:	2302      	movs	r3, #2
  }
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002224:	b0bd      	sub	sp, #244	; 0xf4
 8002226:	af00      	add	r7, sp, #0
 8002228:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800222c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800223c:	68d9      	ldr	r1, [r3, #12]
 800223e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	ea40 0301 	orr.w	r3, r0, r1
 8002248:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800224a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	431a      	orrs	r2, r3
 8002258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	431a      	orrs	r2, r3
 8002260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	4313      	orrs	r3, r2
 8002268:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800226c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002278:	f021 010c 	bic.w	r1, r1, #12
 800227c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002286:	430b      	orrs	r3, r1
 8002288:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800228a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800229a:	6999      	ldr	r1, [r3, #24]
 800229c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	ea40 0301 	orr.w	r3, r0, r1
 80022a6:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022b2:	f040 81a5 	bne.w	8002600 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4bcd      	ldr	r3, [pc, #820]	; (80025f4 <UART_SetConfig+0x3d4>)
 80022be:	429a      	cmp	r2, r3
 80022c0:	d006      	beq.n	80022d0 <UART_SetConfig+0xb0>
 80022c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4bcb      	ldr	r3, [pc, #812]	; (80025f8 <UART_SetConfig+0x3d8>)
 80022ca:	429a      	cmp	r2, r3
 80022cc:	f040 80cb 	bne.w	8002466 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80022d0:	f7ff fbcc 	bl	8001a6c <HAL_RCC_GetPCLK2Freq>
 80022d4:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80022dc:	461c      	mov	r4, r3
 80022de:	f04f 0500 	mov.w	r5, #0
 80022e2:	4622      	mov	r2, r4
 80022e4:	462b      	mov	r3, r5
 80022e6:	1891      	adds	r1, r2, r2
 80022e8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80022ec:	415b      	adcs	r3, r3
 80022ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80022f2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80022f6:	1912      	adds	r2, r2, r4
 80022f8:	eb45 0303 	adc.w	r3, r5, r3
 80022fc:	f04f 0000 	mov.w	r0, #0
 8002300:	f04f 0100 	mov.w	r1, #0
 8002304:	00d9      	lsls	r1, r3, #3
 8002306:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800230a:	00d0      	lsls	r0, r2, #3
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	1911      	adds	r1, r2, r4
 8002312:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8002316:	416b      	adcs	r3, r5
 8002318:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800231c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	461a      	mov	r2, r3
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	1891      	adds	r1, r2, r2
 800232a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800232e:	415b      	adcs	r3, r3
 8002330:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002334:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002338:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800233c:	f7fd ff56 	bl	80001ec <__aeabi_uldivmod>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4bad      	ldr	r3, [pc, #692]	; (80025fc <UART_SetConfig+0x3dc>)
 8002346:	fba3 2302 	umull	r2, r3, r3, r2
 800234a:	095b      	lsrs	r3, r3, #5
 800234c:	011e      	lsls	r6, r3, #4
 800234e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002352:	461c      	mov	r4, r3
 8002354:	f04f 0500 	mov.w	r5, #0
 8002358:	4622      	mov	r2, r4
 800235a:	462b      	mov	r3, r5
 800235c:	1891      	adds	r1, r2, r2
 800235e:	67b9      	str	r1, [r7, #120]	; 0x78
 8002360:	415b      	adcs	r3, r3
 8002362:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002364:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002368:	1912      	adds	r2, r2, r4
 800236a:	eb45 0303 	adc.w	r3, r5, r3
 800236e:	f04f 0000 	mov.w	r0, #0
 8002372:	f04f 0100 	mov.w	r1, #0
 8002376:	00d9      	lsls	r1, r3, #3
 8002378:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800237c:	00d0      	lsls	r0, r2, #3
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	1911      	adds	r1, r2, r4
 8002384:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8002388:	416b      	adcs	r3, r5
 800238a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800238e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	461a      	mov	r2, r3
 8002396:	f04f 0300 	mov.w	r3, #0
 800239a:	1891      	adds	r1, r2, r2
 800239c:	6739      	str	r1, [r7, #112]	; 0x70
 800239e:	415b      	adcs	r3, r3
 80023a0:	677b      	str	r3, [r7, #116]	; 0x74
 80023a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80023a6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80023aa:	f7fd ff1f 	bl	80001ec <__aeabi_uldivmod>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4b92      	ldr	r3, [pc, #584]	; (80025fc <UART_SetConfig+0x3dc>)
 80023b4:	fba3 1302 	umull	r1, r3, r3, r2
 80023b8:	095b      	lsrs	r3, r3, #5
 80023ba:	2164      	movs	r1, #100	; 0x64
 80023bc:	fb01 f303 	mul.w	r3, r1, r3
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	3332      	adds	r3, #50	; 0x32
 80023c6:	4a8d      	ldr	r2, [pc, #564]	; (80025fc <UART_SetConfig+0x3dc>)
 80023c8:	fba2 2303 	umull	r2, r3, r2, r3
 80023cc:	095b      	lsrs	r3, r3, #5
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80023d4:	441e      	add	r6, r3
 80023d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80023da:	4618      	mov	r0, r3
 80023dc:	f04f 0100 	mov.w	r1, #0
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	1894      	adds	r4, r2, r2
 80023e6:	66bc      	str	r4, [r7, #104]	; 0x68
 80023e8:	415b      	adcs	r3, r3
 80023ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023ec:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80023f0:	1812      	adds	r2, r2, r0
 80023f2:	eb41 0303 	adc.w	r3, r1, r3
 80023f6:	f04f 0400 	mov.w	r4, #0
 80023fa:	f04f 0500 	mov.w	r5, #0
 80023fe:	00dd      	lsls	r5, r3, #3
 8002400:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002404:	00d4      	lsls	r4, r2, #3
 8002406:	4622      	mov	r2, r4
 8002408:	462b      	mov	r3, r5
 800240a:	1814      	adds	r4, r2, r0
 800240c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8002410:	414b      	adcs	r3, r1
 8002412:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	461a      	mov	r2, r3
 800241e:	f04f 0300 	mov.w	r3, #0
 8002422:	1891      	adds	r1, r2, r2
 8002424:	6639      	str	r1, [r7, #96]	; 0x60
 8002426:	415b      	adcs	r3, r3
 8002428:	667b      	str	r3, [r7, #100]	; 0x64
 800242a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800242e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002432:	f7fd fedb 	bl	80001ec <__aeabi_uldivmod>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4b70      	ldr	r3, [pc, #448]	; (80025fc <UART_SetConfig+0x3dc>)
 800243c:	fba3 1302 	umull	r1, r3, r3, r2
 8002440:	095b      	lsrs	r3, r3, #5
 8002442:	2164      	movs	r1, #100	; 0x64
 8002444:	fb01 f303 	mul.w	r3, r1, r3
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	3332      	adds	r3, #50	; 0x32
 800244e:	4a6b      	ldr	r2, [pc, #428]	; (80025fc <UART_SetConfig+0x3dc>)
 8002450:	fba2 2303 	umull	r2, r3, r2, r3
 8002454:	095b      	lsrs	r3, r3, #5
 8002456:	f003 0207 	and.w	r2, r3, #7
 800245a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4432      	add	r2, r6
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	e26d      	b.n	8002942 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002466:	f7ff faed 	bl	8001a44 <HAL_RCC_GetPCLK1Freq>
 800246a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800246e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002472:	461c      	mov	r4, r3
 8002474:	f04f 0500 	mov.w	r5, #0
 8002478:	4622      	mov	r2, r4
 800247a:	462b      	mov	r3, r5
 800247c:	1891      	adds	r1, r2, r2
 800247e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002480:	415b      	adcs	r3, r3
 8002482:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002484:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002488:	1912      	adds	r2, r2, r4
 800248a:	eb45 0303 	adc.w	r3, r5, r3
 800248e:	f04f 0000 	mov.w	r0, #0
 8002492:	f04f 0100 	mov.w	r1, #0
 8002496:	00d9      	lsls	r1, r3, #3
 8002498:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800249c:	00d0      	lsls	r0, r2, #3
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	1911      	adds	r1, r2, r4
 80024a4:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80024a8:	416b      	adcs	r3, r5
 80024aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80024ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	461a      	mov	r2, r3
 80024b6:	f04f 0300 	mov.w	r3, #0
 80024ba:	1891      	adds	r1, r2, r2
 80024bc:	6539      	str	r1, [r7, #80]	; 0x50
 80024be:	415b      	adcs	r3, r3
 80024c0:	657b      	str	r3, [r7, #84]	; 0x54
 80024c2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80024c6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80024ca:	f7fd fe8f 	bl	80001ec <__aeabi_uldivmod>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4b4a      	ldr	r3, [pc, #296]	; (80025fc <UART_SetConfig+0x3dc>)
 80024d4:	fba3 2302 	umull	r2, r3, r3, r2
 80024d8:	095b      	lsrs	r3, r3, #5
 80024da:	011e      	lsls	r6, r3, #4
 80024dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80024e0:	461c      	mov	r4, r3
 80024e2:	f04f 0500 	mov.w	r5, #0
 80024e6:	4622      	mov	r2, r4
 80024e8:	462b      	mov	r3, r5
 80024ea:	1891      	adds	r1, r2, r2
 80024ec:	64b9      	str	r1, [r7, #72]	; 0x48
 80024ee:	415b      	adcs	r3, r3
 80024f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80024f6:	1912      	adds	r2, r2, r4
 80024f8:	eb45 0303 	adc.w	r3, r5, r3
 80024fc:	f04f 0000 	mov.w	r0, #0
 8002500:	f04f 0100 	mov.w	r1, #0
 8002504:	00d9      	lsls	r1, r3, #3
 8002506:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800250a:	00d0      	lsls	r0, r2, #3
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	1911      	adds	r1, r2, r4
 8002512:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8002516:	416b      	adcs	r3, r5
 8002518:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800251c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	461a      	mov	r2, r3
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	1891      	adds	r1, r2, r2
 800252a:	6439      	str	r1, [r7, #64]	; 0x40
 800252c:	415b      	adcs	r3, r3
 800252e:	647b      	str	r3, [r7, #68]	; 0x44
 8002530:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002534:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002538:	f7fd fe58 	bl	80001ec <__aeabi_uldivmod>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4b2e      	ldr	r3, [pc, #184]	; (80025fc <UART_SetConfig+0x3dc>)
 8002542:	fba3 1302 	umull	r1, r3, r3, r2
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	2164      	movs	r1, #100	; 0x64
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	3332      	adds	r3, #50	; 0x32
 8002554:	4a29      	ldr	r2, [pc, #164]	; (80025fc <UART_SetConfig+0x3dc>)
 8002556:	fba2 2303 	umull	r2, r3, r2, r3
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002562:	441e      	add	r6, r3
 8002564:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002568:	4618      	mov	r0, r3
 800256a:	f04f 0100 	mov.w	r1, #0
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	1894      	adds	r4, r2, r2
 8002574:	63bc      	str	r4, [r7, #56]	; 0x38
 8002576:	415b      	adcs	r3, r3
 8002578:	63fb      	str	r3, [r7, #60]	; 0x3c
 800257a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800257e:	1812      	adds	r2, r2, r0
 8002580:	eb41 0303 	adc.w	r3, r1, r3
 8002584:	f04f 0400 	mov.w	r4, #0
 8002588:	f04f 0500 	mov.w	r5, #0
 800258c:	00dd      	lsls	r5, r3, #3
 800258e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002592:	00d4      	lsls	r4, r2, #3
 8002594:	4622      	mov	r2, r4
 8002596:	462b      	mov	r3, r5
 8002598:	1814      	adds	r4, r2, r0
 800259a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800259e:	414b      	adcs	r3, r1
 80025a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	461a      	mov	r2, r3
 80025ac:	f04f 0300 	mov.w	r3, #0
 80025b0:	1891      	adds	r1, r2, r2
 80025b2:	6339      	str	r1, [r7, #48]	; 0x30
 80025b4:	415b      	adcs	r3, r3
 80025b6:	637b      	str	r3, [r7, #52]	; 0x34
 80025b8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80025bc:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80025c0:	f7fd fe14 	bl	80001ec <__aeabi_uldivmod>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <UART_SetConfig+0x3dc>)
 80025ca:	fba3 1302 	umull	r1, r3, r3, r2
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	2164      	movs	r1, #100	; 0x64
 80025d2:	fb01 f303 	mul.w	r3, r1, r3
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	3332      	adds	r3, #50	; 0x32
 80025dc:	4a07      	ldr	r2, [pc, #28]	; (80025fc <UART_SetConfig+0x3dc>)
 80025de:	fba2 2303 	umull	r2, r3, r2, r3
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	f003 0207 	and.w	r2, r3, #7
 80025e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4432      	add	r2, r6
 80025f0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80025f2:	e1a6      	b.n	8002942 <UART_SetConfig+0x722>
 80025f4:	40011000 	.word	0x40011000
 80025f8:	40011400 	.word	0x40011400
 80025fc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	4bd1      	ldr	r3, [pc, #836]	; (800294c <UART_SetConfig+0x72c>)
 8002608:	429a      	cmp	r2, r3
 800260a:	d006      	beq.n	800261a <UART_SetConfig+0x3fa>
 800260c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	4bcf      	ldr	r3, [pc, #828]	; (8002950 <UART_SetConfig+0x730>)
 8002614:	429a      	cmp	r2, r3
 8002616:	f040 80ca 	bne.w	80027ae <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800261a:	f7ff fa27 	bl	8001a6c <HAL_RCC_GetPCLK2Freq>
 800261e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002622:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002626:	461c      	mov	r4, r3
 8002628:	f04f 0500 	mov.w	r5, #0
 800262c:	4622      	mov	r2, r4
 800262e:	462b      	mov	r3, r5
 8002630:	1891      	adds	r1, r2, r2
 8002632:	62b9      	str	r1, [r7, #40]	; 0x28
 8002634:	415b      	adcs	r3, r3
 8002636:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002638:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800263c:	1912      	adds	r2, r2, r4
 800263e:	eb45 0303 	adc.w	r3, r5, r3
 8002642:	f04f 0000 	mov.w	r0, #0
 8002646:	f04f 0100 	mov.w	r1, #0
 800264a:	00d9      	lsls	r1, r3, #3
 800264c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002650:	00d0      	lsls	r0, r2, #3
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	eb12 0a04 	adds.w	sl, r2, r4
 800265a:	eb43 0b05 	adc.w	fp, r3, r5
 800265e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4618      	mov	r0, r3
 8002666:	f04f 0100 	mov.w	r1, #0
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	008b      	lsls	r3, r1, #2
 8002674:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002678:	0082      	lsls	r2, r0, #2
 800267a:	4650      	mov	r0, sl
 800267c:	4659      	mov	r1, fp
 800267e:	f7fd fdb5 	bl	80001ec <__aeabi_uldivmod>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4bb3      	ldr	r3, [pc, #716]	; (8002954 <UART_SetConfig+0x734>)
 8002688:	fba3 2302 	umull	r2, r3, r3, r2
 800268c:	095b      	lsrs	r3, r3, #5
 800268e:	011e      	lsls	r6, r3, #4
 8002690:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002694:	4618      	mov	r0, r3
 8002696:	f04f 0100 	mov.w	r1, #0
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	1894      	adds	r4, r2, r2
 80026a0:	623c      	str	r4, [r7, #32]
 80026a2:	415b      	adcs	r3, r3
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
 80026a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026aa:	1812      	adds	r2, r2, r0
 80026ac:	eb41 0303 	adc.w	r3, r1, r3
 80026b0:	f04f 0400 	mov.w	r4, #0
 80026b4:	f04f 0500 	mov.w	r5, #0
 80026b8:	00dd      	lsls	r5, r3, #3
 80026ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80026be:	00d4      	lsls	r4, r2, #3
 80026c0:	4622      	mov	r2, r4
 80026c2:	462b      	mov	r3, r5
 80026c4:	1814      	adds	r4, r2, r0
 80026c6:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80026ca:	414b      	adcs	r3, r1
 80026cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80026d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f04f 0100 	mov.w	r1, #0
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	008b      	lsls	r3, r1, #2
 80026e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80026ea:	0082      	lsls	r2, r0, #2
 80026ec:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80026f0:	f7fd fd7c 	bl	80001ec <__aeabi_uldivmod>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4b96      	ldr	r3, [pc, #600]	; (8002954 <UART_SetConfig+0x734>)
 80026fa:	fba3 1302 	umull	r1, r3, r3, r2
 80026fe:	095b      	lsrs	r3, r3, #5
 8002700:	2164      	movs	r1, #100	; 0x64
 8002702:	fb01 f303 	mul.w	r3, r1, r3
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	3332      	adds	r3, #50	; 0x32
 800270c:	4a91      	ldr	r2, [pc, #580]	; (8002954 <UART_SetConfig+0x734>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002718:	441e      	add	r6, r3
 800271a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800271e:	4618      	mov	r0, r3
 8002720:	f04f 0100 	mov.w	r1, #0
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	1894      	adds	r4, r2, r2
 800272a:	61bc      	str	r4, [r7, #24]
 800272c:	415b      	adcs	r3, r3
 800272e:	61fb      	str	r3, [r7, #28]
 8002730:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002734:	1812      	adds	r2, r2, r0
 8002736:	eb41 0303 	adc.w	r3, r1, r3
 800273a:	f04f 0400 	mov.w	r4, #0
 800273e:	f04f 0500 	mov.w	r5, #0
 8002742:	00dd      	lsls	r5, r3, #3
 8002744:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002748:	00d4      	lsls	r4, r2, #3
 800274a:	4622      	mov	r2, r4
 800274c:	462b      	mov	r3, r5
 800274e:	1814      	adds	r4, r2, r0
 8002750:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8002754:	414b      	adcs	r3, r1
 8002756:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800275a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	4618      	mov	r0, r3
 8002762:	f04f 0100 	mov.w	r1, #0
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	f04f 0300 	mov.w	r3, #0
 800276e:	008b      	lsls	r3, r1, #2
 8002770:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002774:	0082      	lsls	r2, r0, #2
 8002776:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800277a:	f7fd fd37 	bl	80001ec <__aeabi_uldivmod>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4b74      	ldr	r3, [pc, #464]	; (8002954 <UART_SetConfig+0x734>)
 8002784:	fba3 1302 	umull	r1, r3, r3, r2
 8002788:	095b      	lsrs	r3, r3, #5
 800278a:	2164      	movs	r1, #100	; 0x64
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	3332      	adds	r3, #50	; 0x32
 8002796:	4a6f      	ldr	r2, [pc, #444]	; (8002954 <UART_SetConfig+0x734>)
 8002798:	fba2 2303 	umull	r2, r3, r2, r3
 800279c:	095b      	lsrs	r3, r3, #5
 800279e:	f003 020f 	and.w	r2, r3, #15
 80027a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4432      	add	r2, r6
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	e0c9      	b.n	8002942 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80027ae:	f7ff f949 	bl	8001a44 <HAL_RCC_GetPCLK1Freq>
 80027b2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80027ba:	461c      	mov	r4, r3
 80027bc:	f04f 0500 	mov.w	r5, #0
 80027c0:	4622      	mov	r2, r4
 80027c2:	462b      	mov	r3, r5
 80027c4:	1891      	adds	r1, r2, r2
 80027c6:	6139      	str	r1, [r7, #16]
 80027c8:	415b      	adcs	r3, r3
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80027d0:	1912      	adds	r2, r2, r4
 80027d2:	eb45 0303 	adc.w	r3, r5, r3
 80027d6:	f04f 0000 	mov.w	r0, #0
 80027da:	f04f 0100 	mov.w	r1, #0
 80027de:	00d9      	lsls	r1, r3, #3
 80027e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027e4:	00d0      	lsls	r0, r2, #3
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	eb12 0804 	adds.w	r8, r2, r4
 80027ee:	eb43 0905 	adc.w	r9, r3, r5
 80027f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f04f 0100 	mov.w	r1, #0
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	f04f 0300 	mov.w	r3, #0
 8002806:	008b      	lsls	r3, r1, #2
 8002808:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800280c:	0082      	lsls	r2, r0, #2
 800280e:	4640      	mov	r0, r8
 8002810:	4649      	mov	r1, r9
 8002812:	f7fd fceb 	bl	80001ec <__aeabi_uldivmod>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	4b4e      	ldr	r3, [pc, #312]	; (8002954 <UART_SetConfig+0x734>)
 800281c:	fba3 2302 	umull	r2, r3, r3, r2
 8002820:	095b      	lsrs	r3, r3, #5
 8002822:	011e      	lsls	r6, r3, #4
 8002824:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002828:	4618      	mov	r0, r3
 800282a:	f04f 0100 	mov.w	r1, #0
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	1894      	adds	r4, r2, r2
 8002834:	60bc      	str	r4, [r7, #8]
 8002836:	415b      	adcs	r3, r3
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800283e:	1812      	adds	r2, r2, r0
 8002840:	eb41 0303 	adc.w	r3, r1, r3
 8002844:	f04f 0400 	mov.w	r4, #0
 8002848:	f04f 0500 	mov.w	r5, #0
 800284c:	00dd      	lsls	r5, r3, #3
 800284e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002852:	00d4      	lsls	r4, r2, #3
 8002854:	4622      	mov	r2, r4
 8002856:	462b      	mov	r3, r5
 8002858:	1814      	adds	r4, r2, r0
 800285a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800285e:	414b      	adcs	r3, r1
 8002860:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	4618      	mov	r0, r3
 800286c:	f04f 0100 	mov.w	r1, #0
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	008b      	lsls	r3, r1, #2
 800287a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800287e:	0082      	lsls	r2, r0, #2
 8002880:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002884:	f7fd fcb2 	bl	80001ec <__aeabi_uldivmod>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4b31      	ldr	r3, [pc, #196]	; (8002954 <UART_SetConfig+0x734>)
 800288e:	fba3 1302 	umull	r1, r3, r3, r2
 8002892:	095b      	lsrs	r3, r3, #5
 8002894:	2164      	movs	r1, #100	; 0x64
 8002896:	fb01 f303 	mul.w	r3, r1, r3
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	3332      	adds	r3, #50	; 0x32
 80028a0:	4a2c      	ldr	r2, [pc, #176]	; (8002954 <UART_SetConfig+0x734>)
 80028a2:	fba2 2303 	umull	r2, r3, r2, r3
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028ac:	441e      	add	r6, r3
 80028ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80028b2:	4618      	mov	r0, r3
 80028b4:	f04f 0100 	mov.w	r1, #0
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	1894      	adds	r4, r2, r2
 80028be:	603c      	str	r4, [r7, #0]
 80028c0:	415b      	adcs	r3, r3
 80028c2:	607b      	str	r3, [r7, #4]
 80028c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028c8:	1812      	adds	r2, r2, r0
 80028ca:	eb41 0303 	adc.w	r3, r1, r3
 80028ce:	f04f 0400 	mov.w	r4, #0
 80028d2:	f04f 0500 	mov.w	r5, #0
 80028d6:	00dd      	lsls	r5, r3, #3
 80028d8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80028dc:	00d4      	lsls	r4, r2, #3
 80028de:	4622      	mov	r2, r4
 80028e0:	462b      	mov	r3, r5
 80028e2:	1814      	adds	r4, r2, r0
 80028e4:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80028e8:	414b      	adcs	r3, r1
 80028ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80028ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f04f 0100 	mov.w	r1, #0
 80028fa:	f04f 0200 	mov.w	r2, #0
 80028fe:	f04f 0300 	mov.w	r3, #0
 8002902:	008b      	lsls	r3, r1, #2
 8002904:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002908:	0082      	lsls	r2, r0, #2
 800290a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800290e:	f7fd fc6d 	bl	80001ec <__aeabi_uldivmod>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <UART_SetConfig+0x734>)
 8002918:	fba3 1302 	umull	r1, r3, r3, r2
 800291c:	095b      	lsrs	r3, r3, #5
 800291e:	2164      	movs	r1, #100	; 0x64
 8002920:	fb01 f303 	mul.w	r3, r1, r3
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	3332      	adds	r3, #50	; 0x32
 800292a:	4a0a      	ldr	r2, [pc, #40]	; (8002954 <UART_SetConfig+0x734>)
 800292c:	fba2 2303 	umull	r2, r3, r2, r3
 8002930:	095b      	lsrs	r3, r3, #5
 8002932:	f003 020f 	and.w	r2, r3, #15
 8002936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4432      	add	r2, r6
 800293e:	609a      	str	r2, [r3, #8]
}
 8002940:	e7ff      	b.n	8002942 <UART_SetConfig+0x722>
 8002942:	bf00      	nop
 8002944:	37f4      	adds	r7, #244	; 0xf4
 8002946:	46bd      	mov	sp, r7
 8002948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800294c:	40011000 	.word	0x40011000
 8002950:	40011400 	.word	0x40011400
 8002954:	51eb851f 	.word	0x51eb851f

08002958 <__libc_init_array>:
 8002958:	b570      	push	{r4, r5, r6, lr}
 800295a:	4d0d      	ldr	r5, [pc, #52]	; (8002990 <__libc_init_array+0x38>)
 800295c:	4c0d      	ldr	r4, [pc, #52]	; (8002994 <__libc_init_array+0x3c>)
 800295e:	1b64      	subs	r4, r4, r5
 8002960:	10a4      	asrs	r4, r4, #2
 8002962:	2600      	movs	r6, #0
 8002964:	42a6      	cmp	r6, r4
 8002966:	d109      	bne.n	800297c <__libc_init_array+0x24>
 8002968:	4d0b      	ldr	r5, [pc, #44]	; (8002998 <__libc_init_array+0x40>)
 800296a:	4c0c      	ldr	r4, [pc, #48]	; (800299c <__libc_init_array+0x44>)
 800296c:	f000 f820 	bl	80029b0 <_init>
 8002970:	1b64      	subs	r4, r4, r5
 8002972:	10a4      	asrs	r4, r4, #2
 8002974:	2600      	movs	r6, #0
 8002976:	42a6      	cmp	r6, r4
 8002978:	d105      	bne.n	8002986 <__libc_init_array+0x2e>
 800297a:	bd70      	pop	{r4, r5, r6, pc}
 800297c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002980:	4798      	blx	r3
 8002982:	3601      	adds	r6, #1
 8002984:	e7ee      	b.n	8002964 <__libc_init_array+0xc>
 8002986:	f855 3b04 	ldr.w	r3, [r5], #4
 800298a:	4798      	blx	r3
 800298c:	3601      	adds	r6, #1
 800298e:	e7f2      	b.n	8002976 <__libc_init_array+0x1e>
 8002990:	080029e8 	.word	0x080029e8
 8002994:	080029e8 	.word	0x080029e8
 8002998:	080029e8 	.word	0x080029e8
 800299c:	080029ec 	.word	0x080029ec

080029a0 <memset>:
 80029a0:	4402      	add	r2, r0
 80029a2:	4603      	mov	r3, r0
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d100      	bne.n	80029aa <memset+0xa>
 80029a8:	4770      	bx	lr
 80029aa:	f803 1b01 	strb.w	r1, [r3], #1
 80029ae:	e7f9      	b.n	80029a4 <memset+0x4>

080029b0 <_init>:
 80029b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029b2:	bf00      	nop
 80029b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029b6:	bc08      	pop	{r3}
 80029b8:	469e      	mov	lr, r3
 80029ba:	4770      	bx	lr

080029bc <_fini>:
 80029bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029be:	bf00      	nop
 80029c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029c2:	bc08      	pop	{r3}
 80029c4:	469e      	mov	lr, r3
 80029c6:	4770      	bx	lr
